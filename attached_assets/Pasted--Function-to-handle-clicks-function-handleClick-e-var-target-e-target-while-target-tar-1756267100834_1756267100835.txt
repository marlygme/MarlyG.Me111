} // Function to handle clicks function handleClick(e) { var target = e.target; while (target && target !== document) { if (target.tagName === 'A') { // Remove target attribute target.removeAttribute('target'); // Handle internal links if (target.href && (target.href.includes(window.location.hostname) || target.href.startsWith('/') || target.href.includes('marlyg.me'))) { // Don't prevent default for hash links if (!target.href.includes('#')) { e.preventDefault(); e.stopPropagation(); e.stopImmediatePropagation(); // Navigate in same window window.location.href = target.href; } return false; } } target = target.parentElement; } } // Override window.open immediately var originalOpen = window.open; window.open = function(url, name, features) { console.log('Blocked popup attempt:', url); if (url && (url.includes('marlyg.me') || url.startsWith('/'))) { window.location.href = url; return window; } return originalOpen.call(this, url, '_self', features); }; // Apply fixes when DOM is ready if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', function() { setTimeout(fixAllLinks, 100); }); } else { setTimeout(fixAllLinks, 100); } // Apply fixes after window loads (catches late-loading content) window.addEventListener('load', function() { setTimeout(fixAllLinks, 500); setTimeout(fixAllLinks, 1000); setTimeout(fixAllLinks, 2000); }); // Capture clicks at multiple levels document.addEventListener('click', handleClick, true); document.addEventListener('mousedown', handleClick, true); window.addEventListener('click', handleClick, true); // Monitor for new elements being added var observer = new MutationObserver(function(mutations) { var hasNewLinks = false; mutations.forEach(function(mutation) { if (mutation.addedNodes.length > 0) { hasNewLinks = true; } }); if (hasNewLinks) { fixAllLinks(); } }); // Start observing when ready if (document.body) { observer.observe(document.body, { childList: true, subtree: true, attributes: true, attributeFilter: ['target', 'href'] }); } else { document.addEventListener('DOMContentLoaded', function() { observer.observe(document.body, { childList: true, subtree: true, attributes: true, attributeFilter: ['target', 'href'] }); }); } // Continuously fix links every 5 seconds (failsafe) setInterval(fixAllLinks, 5000); })();